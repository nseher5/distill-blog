[
  {
    "path": "posts/2022-02-02-indexing-and-slicing-in-python/",
    "title": "Indexing and Slicing in Python",
    "description": "Breaking down positive negative indexing and slicing in Python.",
    "author": [],
    "date": "2022-02-02",
    "categories": [
      "coding",
      "python"
    ],
    "contents": "\r\n\r\nContents\r\nIndexing\r\nPositive Indexing\r\nNegative Indexing\r\n\r\nSlicing\r\nSlicing with positive values\r\nSlicing with negative values\r\n\r\nSlicing while Stepping\r\nStep with positive value\r\nStep with negative value\r\n\r\nConclusion\r\n\r\nIn python, there are several ways to select items or ranges from lists. Indexing allows accessing items in a list using their index number, typically done using the bracket operator []. Slicing allows accessing multiple items inside a list, typically done using the colon operator :.\r\nIndexing\r\nPositive Indexing\r\nUsed to access single element of list\r\nmy_num = [1, 2, 3, 4, 5, 6]\r\nmy_num[0]\r\n# 1\r\n\r\nmy_text = [\"Seher\", \"plays\", \"video\", \"games\"]\r\nmy_list[3] \r\n# \"games\"\r\n\r\nmy_word = \"Tyrannosaurus\"\r\nmy_word[1]\r\n# \"y\"\r\nNegative Indexing\r\nAccess an element from a list but start from the end of the list\r\nmy_num = [1, 2, 3, 4, 5, 6]\r\nmy_num[-1]                    # Access last element of a list\r\n# 6\r\n\r\nmy_text = [\"Seher\", \"plays\", \"video\", \"games\"]\r\nmy_text[-2]                   # Access second from last element of a list\r\n# \"video\"\r\n\r\nmy_word = \"Tyrannosaurus\"\r\nmy_word[-len(my_word)]        # Retreive first element from list\r\n# \"T\"\r\nSlicing\r\nRetrieve multiple items from a list. Slicing gives lists whereas indexing gave items. Slicing is done using the : operator, the general format is my_list[start:stop] where start and stop can be positive or negative values.\r\nSlicing with positive values\r\nRetreive items from start to end except the last one.\r\nmy_num = [1, 2, 3, 4, 5, 6] \r\nmy_num[0:2]                    # Items from index 0 to index 2 (non inclusive)\r\n# [0, 1]                       \r\n\r\nmy_text = [\"Seher\", \"plays\", \"video\", \"games\"]\r\nprint(my_text[2])              # Retreive item on 2nd index\r\n# \"video\"\r\n\r\nprint(my_text[0:2])            # Start from zero and retreive 2 items, or from index 0 to index 2 (non inclusive)\r\n# [\"Seher\", \"plays\"]\r\n\r\nprint(my_text[0:3])            # Start from zero and retreive 3 items, or from index 0 to index 3 (non inclusive)\r\n# [\"Seher\", \"plays\", \"video\"]\r\n\r\nprint(my_text[1:3])            # Take one item off the front, or from index 1 to index 3 (non inclusive)\r\n# [\"plays\", \"video\"]\r\nEmitting the start or stop index, defaults start to None and stop to len(my_list)-1\r\nmy_word[1:]                    # my_list[start :] = items start at index 1 until the rest of the list\r\n# 'rannosaurus'\r\nmy_word[:4]                    # my_list[: stop] = items start at index 0 until index 4 (non inclusive)\r\n# 'Tyra'\r\nmy_word[:]                     # A copy of the whole list\r\nSlicing with negative values\r\nRetreive items from start to end except the last one, but start from the back of the list.\r\nindex from front                 0   1   2   3   4   5   6   7   8   9  10  11  12\r\nindex from back                 -13 -12 -11 -10 -9  -8  -7  -6  -5  -4  -3  -2  -1\r\n                               +---+---+---+---+---+---+---+---+---+---+---+---+---+\r\nmy_word                        | T | y | r | a | n | n | o | s | a | u | r | u | s |\r\n                               +---+---+---+---+---+---+---+---+---+---+---+---+---+\r\n\r\nmy_word[:-1]                   # Start from index 0 until index -1 (non inclusive) \r\n# 'Tyrannosauru'\r\n\r\nmy_word[-2:]                   # Start from index -2 until the end \r\n# 'us'\r\n\r\nmy_word[-9:-1]                 # Start at index -9 until index -1 (non inclusive)\r\n# 'nnosauru'\r\nSlicing while Stepping\r\nThe step value is the amount by which the index increases. The format is my_list[start:stop:step]. Step can also be a negative value in which case you’re iterating on a list in reverse.\r\nStep with positive value\r\nRetrieve every nth item in list. If the step value is empty it defaults to 1.\r\nmy_num = [1, 2, 3, 4, 5, 6] \r\n\r\nmy_num[::]                    # Every item in list \r\n# [1, 2, 3, 4, 5, 6] \r\n\r\nmy_num[::2]                   # Every second item in list\r\n# [1, 3, 5]\r\n\r\nmy_num[1:5:2]                 # Every second item in list from index 1 to index 5 (non-inclusive)\r\n# [2, 4]\r\nStep with negative value\r\nIf the step is negative, you’re slicing over the iterable in reverse from start to stop with the stop index excluded. The default value of start and stop in my_list[start: stop: step] changes to -1 and -(len(my_list)+1) respectively.\r\n\r\nindex from front                 0   1   2   3   4   5   \r\nindex from back                 -6  -5  -4  -3  -2  -1\r\n                               +---+---+---+---+---+---+\r\nmy_num                         | 1 | 2 | 3 | 4 | 5 | 6 | \r\n                               +---+---+---+---+---+---+\r\n                      \r\nmy_num[::-1]                   # Equivalent to my_num[-1:-7:-1], from index -1 to index -7 (non inclusive) \r\n# [6, 5, 4, 3, 2, 1]           # All items in list but reversed\r\n\r\nmy_num[::-2]            \r\n# [6, 4, 2]                    # Every second item in list but revered\r\n\r\nmy_num[1::-1]                  # Equivalent to my_num[1:-7:-1], from index 1 to index -7 (non inclusive) but reversed\r\n# [1, 2]                       # The first two items, reversed\r\n\r\nmy_num[:-3:-1]                 # Equivalent to my_num[-1:-3:-1], from index -1 to index -3 (non-inclusive) but reversed  \r\n# [6, 5]                       # The last two items, reversed\r\n\r\nmy_num[-3::-1]                 # Equivalent to my_num[-3:-7:-1], from index -3 to -7 (non inclusive) but reversed  \r\n# [4, 3, 2, 1]                 # Everything except the last two items, reversed\r\nConclusion\r\nIn python, lists and string objects can be indexed and sliced. Indexing is done using square brackets [] while slicing is done using the : operator. Slicing differs from indexing because it outputs a list instead of an item. A colon operator allows us to select a range, forwards or backwards, and at increments depending on the values in my_list [start:stop:step].\r\nSource: Stack Overflow Understanding Slice Notation\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-02T20:13:18-07:00",
    "input_file": "indexing-and-slicing-in-python.knit.md"
  },
  {
    "path": "posts/2022-02-01-wrapping-up-a-project/",
    "title": "Wrapping up a project",
    "description": "A guide to project retrospectives.",
    "author": [],
    "date": "2022-02-01",
    "categories": [
      "management"
    ],
    "contents": "\r\n\r\nContents\r\nIndividual reflection\r\nTeam reflection\r\nProject Wrap up Meeting\r\nConclusion\r\n\r\nAt the end of a project or at the close of any significant milestone, phase or quarter in the project, a project wrap-up or retrospective gives an opportunity to celebrate the team’s achievements, get feedback on what can be improved, learn from each other and reflect on overall impact and performance. Here is an approach for individual and team reflection that I’ve used on projects with some success. It is a two part process; an individual reflection on personal and team performance by each team member, followed by a round robin team discussion.\r\nIndividual reflection\r\nSupports individual reflection on your time on the project. It also forces you to structure your thoughts and think through lessons learnt to share with your team. Each team member identifies the following:\r\nWhat went well? What tasks did you enjoy? What achievements can be celebrated? Think about stakeholder interaction, ways of working, deliverables, project goals, workshops etc.\r\nWhat didn’t go so well? What challenges did we face? What were the moments when you felt stuck? Why were they frustrating? Were the challenges technical, business-related, communication-related, or politics?\r\nWhat can I take away? What did you learn from the challenges you faced on this project? How can you improve on the challenge you faced to improve future projects? What were your personal learning goals for this project or sprint?\r\n(For Managers) What could I have done better to support and advocate for my team and project goals?\r\nTemplate\r\n\r\nTeam reflection\r\nShare project experiences and reflections as a team, identifying areas for celebration and opportunities for improvement to facilitate team consensus on project impact. Classify experiences along four quadrants in a matrix:\r\nWhat went well? - Keep doing and improve on current processes, celebrate acheivements\r\nWhat didn’t go so well?\r\nActions Lessons learnt, improvement opportunities, plan to tackle roadblocks\r\nTemplate\r\n\r\nProject Wrap up Meeting\r\nBefore the meeting\r\nSet up a Project Wrap Up meeting\r\nClarify purpose, agenda of the meeting\r\nAsk the team to fill out individual reflection template ~15 minutes\r\n\r\nDuring the meeting\r\nClarify purpose and agenda of the meeting\r\nSet the time period under discussion (last sprint, last quarter)\r\nCommunicate ground rules ~ 5 minutes\r\nDont take it personally\r\nEveryone’s experience is valid\r\nGo with an open mind\r\nFocus on improvements rather than placing blame\r\n\r\nAsk team members to share what went well, what didn’t go well and actions in a rapid round robin ~ 30 minutes\r\nUpdate team reflection template in real-time\r\n\r\nAfter the meeting\r\nAfter the meeting, send out team reflection document to the team\r\n\r\nConclusion\r\nRetrospectives take 30-60 minutes and can have a great impact on team performance, growth and motivation. It has personally helped me reflect on the work I’ve done for the past 3-6 months, critically think about my achievements and mistakes I wont repeat on my next project.\r\nHelpful resources: Data Science and Agile (What Works, and What Doesn’t) by Eugene Yan, Altassan Retrospectives\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-02T19:58:59-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-01-31-my-first-post/",
    "title": "My first post",
    "description": "A short description of the post. I am testing out how to create blog posts on the distill blog. Let's see if this one worked!",
    "author": [
      {
        "name": "Seher Ahmad",
        "url": {}
      }
    ],
    "date": "2022-01-31",
    "categories": [],
    "contents": "\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-01-31T23:20:22-07:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to My Blog",
    "description": "Welcome to my new blog. I write about my experiences in consulting  and analytics. I hope you enjoy reading!",
    "author": [
      {
        "name": "Seher Ahmad",
        "url": {}
      }
    ],
    "date": "2022-01-31",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-01-31T23:23:33-07:00",
    "input_file": {}
  }
]
