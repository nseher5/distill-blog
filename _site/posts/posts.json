[
  {
    "path": "posts/2022-02-04-starting-a-new-project/",
    "title": "Starting a new project",
    "description": "How t get to know your team and establish team norms when you join a new team",
    "author": [],
    "date": "2022-02-04",
    "categories": [
      "management"
    ],
    "contents": "\r\n\r\nContents\r\nIntroduce yourself\r\nPersonality\r\nDetails\r\nPast and Future\r\n\r\nEstablish Team Norms\r\nWorking Styles\r\nDaily Time Availability\r\nWeekly Team Schedule\r\n\r\nConclusion\r\n\r\nIn a career like consulting, you’re constantly change teams, clients and projects on a monthly basis. Your new team will most probably be comprised of people you’ve never even met, they might not know your strengths and weaknesses, your future goals, your working style, and any constraints at home. It’s worth spending some time before starting work to introduce yourself (your authenthic self), get to know your team members and establish team norms to ensure good collaboration going forward.\r\nIntroduce yourself\r\nOne way to do this on a new project is by setting up 1:1 with individual team members and leadership you’ll be interacting with on a day to day basis. You can use this opportunity to share your working style, boundaries, and personal narrative. The first 1:1 is also an opportunity to get to know the other person, their working style, strengths, and backgrounds so you account for their preferred ways of working as you plan out your project.\r\nPersonality\r\nReflect on your working style, strengths, and personality characteristics. Talk about how you work best and what you’re good at so your teammates can ask you for help in areas you’re an expert in. Use this as an opportunity to ask others about their working styles and find synergies in personality and strengths\r\n\r\nDetails\r\nCommunicate any other details that might be helpful as you work together with your team. If there are other workstreams or initiatives you help out with, tell your team so they have visibility into whats on your plate. Ways of working e.g. communication preferences, brainstorming methods, and working hours should also be discussed to feed into team norms. Use this opportunity to tell your team a little about yourself outside or work, your hobbies, interests, passion projects.\r\n\r\nPast and Future\r\nSharing past experiences and backgrounds helps establish a common ground and builds camaraderie e.g. when you find our your teammate went to the same school as you. Communicating your future aspirations and developmental goals helps your team and managers provide the right networking or training opportunity that might be a good fit with your career goals. Including photos makes you more human especially in the new normal where we dont see our teammate svery often.\r\n\r\nEstablish Team Norms\r\nNot everyone in your new team may share the same working style with you. These often pose problems later on e.g. being expected to lead a weekly meeting at 10pm (I’ve been there) or working with team members who expect over/under communication. An internal project kick-off meeting is standard practice in consulting projects to get to know the entire team before starting work. It is used to identify differences, similarities, tensions, and opportunities in working style, daily schedules, and weekly cadences in order to facilitate team consensus on a shared approach.\r\nWorking Styles\r\nCommunicating and aligning working styles among team members can present opportunities for some team members to hop on a call early morning or late at night if that works for their schedule. It also highlights tensions in working style that might resurface later, so its useful to get ahead of it and have a conversation on how to best address it.\r\n\r\nDaily Time Availability\r\nJuggling remote work with 4-5 different time zones can be mentally draining, especially if you have to work late to attend calls with Asia. Providing visibility into team members preferred working hours and what hours are off-limits for personal reasons, the team can brainstorm ways to enable and respect varying day structures, working styles and boundaries. Teams can also think about how to work smarter, give back time (this could have been an email), and enable team members to charge offline.\r\n\r\nWeekly Team Schedule\r\nAfter individual working hours are set and agreed upon, establish how the team will work during the week. Will you have a daily standup and a wrap up call? When should we have collaboration sessions based on previously established team working hours? Should we have a weekly retrospective? Are there important recurring client meetings?\r\n\r\nConclusion\r\nWhen you join a new team, set up 1:1s with them to introduce yourself and get to know your team and use a project kick-off call to establish team norms and ways of working going forward. By doing this you can align your ways of working, accelerate collaboration, and enable your team to bring their authentic self to work.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-04T16:23:46-07:00",
    "input_file": "starting-a-new-project.knit.md"
  },
  {
    "path": "posts/2022-02-02-indexing-and-slicing-in-python/",
    "title": "Indexing and Slicing in Python",
    "description": "Breaking down positive negative indexing and slicing in Python.",
    "author": [],
    "date": "2022-02-02",
    "categories": [
      "coding",
      "python"
    ],
    "contents": "\r\n\r\nContents\r\nIndexing\r\nPositive Indexing\r\nNegative Indexing\r\n\r\nSlicing\r\nSlicing with positive values\r\nSlicing with negative values\r\n\r\nSlicing while Stepping\r\nStep with positive value\r\nStep with negative value\r\n\r\nConclusion\r\n\r\nIn python, there are several ways to select items or ranges from lists. Indexing allows accessing items in a list using their index number, typically done using the bracket operator []. Slicing allows accessing multiple items inside a list, typically done using the colon operator :.\r\nIndexing\r\nPositive Indexing\r\nUsed to access single element of list\r\n\r\nmy_num = [1, 2, 3, 4, 5, 6]\r\nmy_num[0]\r\n# 1\r\n\r\nmy_text = [\"Seher\", \"plays\", \"video\", \"games\"]\r\nmy_text[3] \r\n# \"games\"\r\n\r\nmy_word = \"Tyrannosaurus\"\r\nmy_word[1]\r\n# \"y\"\r\n\r\nNegative Indexing\r\nAccess an element from a list but start from the end of the list\r\n\r\nmy_num = [1, 2, 3, 4, 5, 6]\r\nmy_num[-1]                    # Access last element of a list\r\n# 6\r\n\r\nmy_text = [\"Seher\", \"plays\", \"video\", \"games\"]\r\nmy_text[-2]                   # Access second from last element of a list\r\n# \"video\"\r\n\r\nmy_word = \"Tyrannosaurus\"\r\nmy_word[-len(my_word)]        # Retrieve first element from list\r\n# \"T\"\r\n\r\nSlicing\r\nRetrieve multiple items from a list. Slicing gives lists whereas indexing gave items. Slicing is done using the : operator, the general format is my_list[start:stop] where start and stop can be positive or negative values.\r\nSlicing with positive values\r\nRetrieve items from start to end except the last one.\r\n\r\nmy_num = [1, 2, 3, 4, 5, 6] \r\nmy_num[0:2]                    # Items from index 0 to index 2 (non inclusive)\r\n# [0, 1]                       \r\n\r\nmy_text = [\"Seher\", \"plays\", \"video\", \"games\"]\r\nmy_text[2]                     # Retrieve item on 2nd index\r\n# \"video\"\r\n\r\nmy_text[0:2]                   # Start from zero and retreive 2 items, or from index 0 to index 2 (non inclusive)\r\n# [\"Seher\", \"plays\"]\r\n\r\nmy_text[0:3]                   # Start from zero and retreive 3 items, or from index 0 to index 3 (non inclusive)\r\n# [\"Seher\", \"plays\", \"video\"]\r\n\r\nmy_text[1:3]                   # Take one item off the front, or from index 1 to index 3 (non inclusive)\r\n# [\"plays\", \"video\"]\r\n\r\nEmitting the start or stop index, defaults start to None and stop to len(my_list)-1\r\n\r\nmy_word = \"Tyrannosaurus\"\r\n\r\nmy_word[1:]                    # my_list[start :] = items start at index 1 until the rest of the list\r\n# 'rannosaurus'\r\nmy_word[:4]                    # my_list[: stop] = items start at index 0 until index 4 (non inclusive)\r\n# 'Tyra'\r\nmy_word[:]                     # A copy of the whole list\r\n\r\nSlicing with negative values\r\nRetrieve items from start to end except the last one, but start from the back of the list.\r\n\r\n#index from front                 0   1   2   3   4   5   6   7   8   9  10  11  12\r\n#index from back                 -13 -12 -11 -10 -9  -8  -7  -6  -5  -4  -3  -2  -1\r\n#                               +---+---+---+---+---+---+---+---+---+---+---+---+---+\r\n#my_word                        | T | y | r | a | n | n | o | s | a | u | r | u | s |\r\n#                               +---+---+---+---+---+---+---+---+---+---+---+---+---+\r\n\r\nmy_word = \"Tyrannosaurus\"\r\n\r\nmy_word[:-1]                   # Start from index 0 until index -1 (non inclusive) \r\n# 'Tyrannosauru'\r\n\r\nmy_word[-2:]                   # Start from index -2 until the end \r\n# 'us'\r\n\r\nmy_word[-9:-1]                 # Start at index -9 until index -1 (non inclusive)\r\n# 'nnosauru'\r\n\r\nSlicing while Stepping\r\nThe step value is the amount by which the index increases. The format is my_list[start:stop:step]. Step can also be a negative value in which case you’re iterating on a list in reverse.\r\nStep with positive value\r\nRetrieve every nth item in list. If the step value is empty it defaults to 1.\r\n\r\nmy_num = [1, 2, 3, 4, 5, 6] \r\n\r\nmy_num[::]                    # Every item in list \r\n# [1, 2, 3, 4, 5, 6] \r\n\r\nmy_num[::2]                   # Every second item in list\r\n# [1, 3, 5]\r\n\r\nmy_num[1:5:2]                 # Every second item in list from index 1 to index 5 (non-inclusive)\r\n# [2, 4]\r\n\r\nStep with negative value\r\nIf the step is negative, you’re slicing over the iterable in reverse from start to stop with the stop index excluded. The default value of start and stop in my_list[start: stop: step] changes to -1 and -(len(my_list)+1) respectively.\r\n\r\n\r\n#index from front                 0   1   2   3   4   5   \r\n#index from back                 -6  -5  -4  -3  -2  -1\r\n#                               +---+---+---+---+---+---+\r\n#my_num                         | 1 | 2 | 3 | 4 | 5 | 6 | \r\n#                               +---+---+---+---+---+---+\r\n                      \r\nmy_num = [1, 2, 3, 4, 5, 6] \r\n\r\nmy_num[::-1]                   # Equivalent to my_num[-1:-7:-1], from index -1 to index -7 (non inclusive) \r\n# [6, 5, 4, 3, 2, 1]           # All items in list but reversed\r\n\r\nmy_num[::-2]            \r\n# [6, 4, 2]                    # Every second item in list but revered\r\n\r\nmy_num[1::-1]                  # Equivalent to my_num[1:-7:-1], from index 1 to index -7 (non inclusive) but reversed\r\n# [1, 2]                       # The first two items, reversed\r\n\r\nmy_num[:-3:-1]                 # Equivalent to my_num[-1:-3:-1], from index -1 to index -3 (non-inclusive) but reversed  \r\n# [6, 5]                       # The last two items, reversed\r\n\r\nmy_num[-3::-1]                 # Equivalent to my_num[-3:-7:-1], from index -3 to -7 (non inclusive) but reversed  \r\n# [4, 3, 2, 1]                 # Everything except the last two items, reversed\r\n\r\nConclusion\r\nIn python, lists and string objects can be indexed and sliced. Indexing is done using square brackets [] while slicing is done using the : operator. Slicing differs from indexing because it outputs a list instead of an item. A colon operator allows us to select a range, forwards or backwards, and at increments depending on the values in my_list [start:stop:step].\r\nSource: Stack Overflow Understanding Slice Notation\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-02T21:06:01-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-02-01-wrapping-up-a-project/",
    "title": "Wrapping up a project",
    "description": "A guide to project retrospectives.",
    "author": [],
    "date": "2022-02-01",
    "categories": [
      "management"
    ],
    "contents": "\r\n\r\nContents\r\nIndividual reflection\r\nTeam reflection\r\nProject Wrap up Meeting\r\nConclusion\r\n\r\nAt the end of a project or at the close of any significant milestone, phase or quarter in the project, a project wrap-up or retrospective gives an opportunity to celebrate the team’s achievements, get feedback on what can be improved, learn from each other and reflect on overall impact and performance. Here is an approach for individual and team reflection that I’ve used on projects with some success. It is a two part process; an individual reflection on personal and team performance by each team member, followed by a round robin team discussion.\r\nIndividual reflection\r\nSupports individual reflection on your time on the project. It also forces you to structure your thoughts and think through lessons learnt to share with your team. Each team member identifies the following:\r\nWhat went well? What tasks did you enjoy? What achievements can be celebrated? Think about stakeholder interaction, ways of working, deliverables, project goals, workshops etc.\r\nWhat didn’t go so well? What challenges did we face? What were the moments when you felt stuck? Why were they frustrating? Were the challenges technical, business-related, communication-related, or politics?\r\nWhat can I take away? What did you learn from the challenges you faced on this project? How can you improve on the challenge you faced to improve future projects? What were your personal learning goals for this project or sprint?\r\n(For Managers) What could I have done better to support and advocate for my team and project goals?\r\nTemplate\r\n\r\nTeam reflection\r\nShare project experiences and reflections as a team, identifying areas for celebration and opportunities for improvement to facilitate team consensus on project impact. Classify experiences along four quadrants in a matrix:\r\nWhat went well? - Keep doing and improve on current processes, celebrate acheivements\r\nWhat didn’t go so well?\r\nActions Lessons learnt, improvement opportunities, plan to tackle roadblocks\r\nTemplate\r\n\r\nProject Wrap up Meeting\r\nBefore the meeting\r\nSet up a Project Wrap Up meeting\r\nClarify purpose, agenda of the meeting\r\nAsk the team to fill out individual reflection template ~15 minutes\r\n\r\nDuring the meeting\r\nClarify purpose and agenda of the meeting\r\nSet the time period under discussion (last sprint, last quarter)\r\nCommunicate ground rules ~ 5 minutes\r\nDont take it personally\r\nEveryone’s experience is valid\r\nGo with an open mind\r\nFocus on improvements rather than placing blame\r\n\r\nAsk team members to share what went well, what didn’t go well and actions in a rapid round robin ~ 30 minutes\r\nUpdate team reflection template in real-time\r\n\r\nAfter the meeting\r\nAfter the meeting, send out team reflection document to the team\r\n\r\nConclusion\r\nRetrospectives take 30-60 minutes and can have a great impact on team performance, growth and motivation. It has personally helped me reflect on the work I’ve done for the past 3-6 months, critically think about my achievements and mistakes I wont repeat on my next project.\r\nHelpful resources: Data Science and Agile (What Works, and What Doesn’t) by Eugene Yan, Altassan Retrospectives\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-02-02T19:58:59-07:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to My Blog",
    "description": "Welcome to my new blog. I write about my experiences in consulting  and analytics. I hope you enjoy reading!",
    "author": [
      {
        "name": "Seher Ahmad",
        "url": {}
      }
    ],
    "date": "2022-01-31",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-01-31T23:23:33-07:00",
    "input_file": {}
  }
]
